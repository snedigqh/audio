package filters

import (
	"math"
	"testing"

	"github.com/mattetti/audio/dsp/windows"
)

var closeFactor = 1e-8

func float64Equal(a, b float64) bool {
	return math.Abs(a-b) <= closeFactor || math.Abs(1-a/b) <= closeFactor
}

func TestSinc_TransitionFreq(t *testing.T) {
	s := &Sinc{
		Taps:         62,
		SamplingFreq: 44100,
		CutOffFreq:   10000,
		Window:       windows.Blackman,
	}
	if tf := s.TransitionFreq(); tf != 0.22675736961451248 {
		t.Fatalf("expected the transition freq to be 0.22675736961451248 but was %f", tf)
	}
}

func TestSinc_LowPassCoefs(t *testing.T) {
	s := &Sinc{
		Taps:         62,
		SamplingFreq: 44100,
		CutOffFreq:   10000,
		Window:       windows.Blackman,
	}
	coefs := s.LowPassCoefs()
	expected := []float64{
		-2.6242627466020627e-20, -9.308409044081184e-06, -1.891666429827646e-05, 7.930147893322974e-05, 0.00012825996467078055, -0.00018761111755909003, -0.0004157743427201195, 0.00024855585062726743, 0.000965784806320067, -9.669697938843214e-05, -0.001818157533640114, -0.0005258451209523136, 0.002903194559735556, 0.0019501254264326032, -0.003966788901705149, -0.004518429903463843, 0.004508041319221437, 0.008485161279456392, -0.003746405283808051, -0.013904376555168116, 0.0006092595225437504, 0.02054042750631061, 0.006333671273783543, -0.027838706758186078, -0.019241430883053766, 0.034979818093886256, 0.04266396526687624, -0.04101596167330092, -0.0925013134092271, 0.04506098918940999, 0.31359801530436804, 0.4535147392290249, 0.31359801530436804, 0.04506098918940999, -0.0925013134092271, -0.04101596167330092, 0.04266396526687624, 0.034979818093886256, -0.019241430883053766, -0.027838706758186078, 0.006333671273783543, 0.02054042750631061, 0.0006092595225437504, -0.013904376555168116, -0.003746405283808051, 0.008485161279456392, 0.004508041319221437, -0.004518429903463843, -0.003966788901705149, 0.0019501254264326032, 0.002903194559735556, -0.0005258451209523136, -0.001818157533640114, -9.669697938843214e-05, 0.000965784806320067, 0.00024855585062726743, -0.0004157743427201195, -0.00018761111755909003, 0.00012825996467078055, 7.930147893322974e-05, -1.891666429827646e-05, -9.308409044081184e-06, -2.6242627466020627e-20,
	}
	for i, k := range coefs {
		if !float64Equal(k, expected[i]) {
			t.Logf("[%d] wrong coef, expected %f, got %f\n", i, expected[i], k)
			t.Fail()
		}
	}
}

func TestSinc_HighPassCoefs(t *testing.T) {
	s := &Sinc{
		Taps:         62,
		SamplingFreq: 44100,
		CutOffFreq:   10000,
		Window:       windows.Blackman,
	}
	coefs := s.HighPassCoefs()
	expected := []float64{
		2.6242627466020627e-20, 9.308409044081184e-06, 1.891666429827646e-05, -7.930147893322974e-05, -0.00012825996467078055, 0.00018761111755909003, 0.0004157743427201195, -0.0002485558506272677, -0.000965784806320067, 9.669697938843214e-05, 0.001818157533640114, 0.0005258451209523136, -0.002903194559735556, -0.0019501254264326032, 0.003966788901705149, 0.004518429903463842, -0.004508041319221437, -0.00848516127945639, 0.003746405283808051, 0.013904376555168116, -0.0006092595225437504, -0.02054042750631061, -0.006333671273783543, 0.027838706758186078, 0.019241430883053766, -0.03497981809388626, -0.04266396526687625, 0.04101596167330092, 0.0925013134092271, -0.04506098918940999, -0.31359801530436804, 0.5464852607709749, -0.31359801530436804, -0.04506098918940999, 0.0925013134092271, 0.04101596167330092, -0.04266396526687625, -0.03497981809388626, 0.019241430883053766, 0.027838706758186078, -0.006333671273783543, -0.02054042750631061, -0.0006092595225437504, 0.013904376555168116, 0.003746405283808051, -0.00848516127945639, -0.004508041319221437, 0.004518429903463842, 0.003966788901705149, -0.0019501254264326032, -0.002903194559735556, 0.0005258451209523136, 0.001818157533640114, 9.669697938843214e-05, -0.000965784806320067, -0.0002485558506272677, 0.0004157743427201195, 0.00018761111755909003, -0.00012825996467078055, -7.930147893322974e-05, 1.891666429827646e-05, 9.308409044081184e-06, 2.6242627466020627e-20,
	}
	for i, k := range coefs {
		if !float64Equal(k, expected[i]) {
			t.Logf("[%d] wrong coef, expected %f, got %f\n", i, expected[i], k)
			t.Fail()
		}
	}
}
