package filters

import (
	"testing"

	"github.com/mattetti/audio/dsp/windows"
	"github.com/mattetti/audio/generator"
)

func TestSinc_Convolve(t *testing.T) {
	osc := generator.NewOsc(generator.WaveSine, 8000, 10000)
	signal := osc.Signal(10000)

	s := &Sinc{
		Taps:         62,
		SamplingFreq: 10000,
		CutOffFreq:   5000,
		Window:       windows.Blackman,
	}
	fir := &FIR{Sinc: s}

	filtered, err := fir.Convolve(signal, fir.Sinc.LowPassCoefs())
	if err != nil {
		t.Fatal(err)
	}

	expected := []float64{
		0.0, 0.0,
		1.0094628406853492e-19, 6.245659458053641e-20, 2.5624126585886407e-19, -1.1070971733210929e-18, -2.0892090493358173e-18, 3.865086706387968e-20, 4.0687977179264766e-18, -3.5170154530803075e-18, 6.4217194955482514e-18, 9.192015504055974e-18, 4.847319962950073e-18, -2.3587368347966008e-17, -1.1098007002805838e-17, 2.3756098964873828e-17, 3.746195700911826e-17, -4.039839578928172e-17, -4.6881658881701906e-17, 3.314683079224198e-17, 8.712396237059893e-17, -5.904619824855682e-17, -9.955636875046792e-17, -2.8638571726029356e-17, 1.1002682548456403e-16, 6.657294275137425e-17, -3.70783411414936e-17, -1.2283455382615664e-16, -4.18235929931119e-18, 8.454868642543907e-17, 9.289582233031331e-17, -6.405105473151541e-17,
		-0.95136,
		-0.58816, 0.5881600000000001, 0.95136, -3.70783411414936e-17, -0.95136, -0.58816, 0.5881600000000001, 0.95136, -5.904619824855682e-17, -0.95136, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, 3.7461957009118256e-17, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, 9.192015504055952e-18, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -2.089209049335829e-18, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, 4.067915750455608e-34, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001, -1.4030885900110094e-33, -0.9513600000000001, -0.5881600000000001, 0.5881600000000001, 0.9513600000000001,
	}

	for i := 0; i < len(expected); i++ {
		if !float64Equal(filtered[i], expected[i]) {
			t.Fatalf("[%d] expected %v, got %v\n", i,
				expected[i],
				filtered[i])
		}
	}
}
